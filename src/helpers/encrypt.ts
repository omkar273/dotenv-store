import CryptoJS from 'crypto-js';

/**
 * Supported encryption algorithms
 */
export type Algorithm = 'aes' | 'aes-256-cbc' | 'tripledes' | 'rabbit' | 'rc4';

// Special key for algorithm tracking
const ALGORITHM_TRACKING_KEY = 'caygnus';

/**
 * Encrypts environment variable data using the specified encryption algorithm
 * @param data - The data to encrypt (usually stringified JSON of env vars)
 * @param secretKey - The secret key to use for encryption
 * @param algorithm - The encryption algorithm to use (default: 'aes')
 * @returns The encrypted string with algorithm tracking
 */
export const encrypt = (data: string, secretKey: string, algorithm: Algorithm = 'aes'): string => {
    try {
        // Encrypt the actual data
        let encryptedData: string;

        switch (algorithm) {
            case 'aes':
                encryptedData = CryptoJS.AES.encrypt(data, secretKey).toString();
                break;
            case 'aes-256-cbc':
                encryptedData = CryptoJS.AES.encrypt(data, secretKey, {
                    mode: CryptoJS.mode.CBC,
                    padding: CryptoJS.pad.Pkcs7
                }).toString();
                break;
            case 'tripledes':
                encryptedData = CryptoJS.TripleDES.encrypt(data, secretKey).toString();
                break;
            case 'rabbit':
                encryptedData = CryptoJS.Rabbit.encrypt(data, secretKey).toString();
                break;
            case 'rc4':
                encryptedData = CryptoJS.RC4.encrypt(data, secretKey).toString();
                break;
            default:
                encryptedData = CryptoJS.AES.encrypt(data, secretKey).toString();
        }

        // Encrypt the algorithm information with the special key
        const algorithmInfo = JSON.stringify({
            alg: algorithm,
            warning: "DO NOT EDIT THIS FILE. It contains encrypted environment variables."
        });

        const encryptedAlgorithmInfo = CryptoJS.AES.encrypt(algorithmInfo, ALGORITHM_TRACKING_KEY).toString();

        // Combine the encrypted data and algorithm info
        // Format: [encrypted algorithm info].[encrypted data]
        return `${encryptedAlgorithmInfo}.${encryptedData}`;
    } catch (error) {
        throw new Error(`Failed to encrypt data with ${algorithm}: ${(error as Error).message}`);
    }
};
